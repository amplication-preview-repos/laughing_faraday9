/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SubTask as PrismaSubTask } from "@prisma/client";

export class SubTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SubTaskCountArgs, "select">): Promise<number> {
    return this.prisma.subTask.count(args);
  }

  async subTasks<T extends Prisma.SubTaskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubTaskFindManyArgs>
  ): Promise<PrismaSubTask[]> {
    return this.prisma.subTask.findMany<Prisma.SubTaskFindManyArgs>(args);
  }
  async subTask<T extends Prisma.SubTaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubTaskFindUniqueArgs>
  ): Promise<PrismaSubTask | null> {
    return this.prisma.subTask.findUnique(args);
  }
  async createSubTask<T extends Prisma.SubTaskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubTaskCreateArgs>
  ): Promise<PrismaSubTask> {
    return this.prisma.subTask.create<T>(args);
  }
  async updateSubTask<T extends Prisma.SubTaskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubTaskUpdateArgs>
  ): Promise<PrismaSubTask> {
    return this.prisma.subTask.update<T>(args);
  }
  async deleteSubTask<T extends Prisma.SubTaskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubTaskDeleteArgs>
  ): Promise<PrismaSubTask> {
    return this.prisma.subTask.delete(args);
  }
}
