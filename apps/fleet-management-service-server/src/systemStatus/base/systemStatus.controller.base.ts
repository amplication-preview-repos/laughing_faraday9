/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SystemStatusService } from "../systemStatus.service";
import { SystemStatusCreateInput } from "./SystemStatusCreateInput";
import { SystemStatus } from "./SystemStatus";
import { SystemStatusFindManyArgs } from "./SystemStatusFindManyArgs";
import { SystemStatusWhereUniqueInput } from "./SystemStatusWhereUniqueInput";
import { SystemStatusUpdateInput } from "./SystemStatusUpdateInput";

export class SystemStatusControllerBase {
  constructor(protected readonly service: SystemStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SystemStatus })
  async createSystemStatus(
    @common.Body() data: SystemStatusCreateInput
  ): Promise<SystemStatus> {
    return await this.service.createSystemStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SystemStatus] })
  @ApiNestedQuery(SystemStatusFindManyArgs)
  async systemStatuses(
    @common.Req() request: Request
  ): Promise<SystemStatus[]> {
    const args = plainToClass(SystemStatusFindManyArgs, request.query);
    return this.service.systemStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SystemStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async systemStatus(
    @common.Param() params: SystemStatusWhereUniqueInput
  ): Promise<SystemStatus | null> {
    const result = await this.service.systemStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SystemStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSystemStatus(
    @common.Param() params: SystemStatusWhereUniqueInput,
    @common.Body() data: SystemStatusUpdateInput
  ): Promise<SystemStatus | null> {
    try {
      return await this.service.updateSystemStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SystemStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSystemStatus(
    @common.Param() params: SystemStatusWhereUniqueInput
  ): Promise<SystemStatus | null> {
    try {
      return await this.service.deleteSystemStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
