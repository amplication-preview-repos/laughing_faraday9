/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SystemStatus } from "./SystemStatus";
import { SystemStatusCountArgs } from "./SystemStatusCountArgs";
import { SystemStatusFindManyArgs } from "./SystemStatusFindManyArgs";
import { SystemStatusFindUniqueArgs } from "./SystemStatusFindUniqueArgs";
import { DeleteSystemStatusArgs } from "./DeleteSystemStatusArgs";
import { SystemStatusService } from "../systemStatus.service";
@graphql.Resolver(() => SystemStatus)
export class SystemStatusResolverBase {
  constructor(protected readonly service: SystemStatusService) {}

  async _systemStatusesMeta(
    @graphql.Args() args: SystemStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SystemStatus])
  async systemStatuses(
    @graphql.Args() args: SystemStatusFindManyArgs
  ): Promise<SystemStatus[]> {
    return this.service.systemStatuses(args);
  }

  @graphql.Query(() => SystemStatus, { nullable: true })
  async systemStatus(
    @graphql.Args() args: SystemStatusFindUniqueArgs
  ): Promise<SystemStatus | null> {
    const result = await this.service.systemStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SystemStatus)
  async deleteSystemStatus(
    @graphql.Args() args: DeleteSystemStatusArgs
  ): Promise<SystemStatus | null> {
    try {
      return await this.service.deleteSystemStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
