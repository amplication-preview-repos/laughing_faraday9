/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fleet as PrismaFleet } from "@prisma/client";

export class FleetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FleetCountArgs, "select">): Promise<number> {
    return this.prisma.fleet.count(args);
  }

  async fleets<T extends Prisma.FleetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FleetFindManyArgs>
  ): Promise<PrismaFleet[]> {
    return this.prisma.fleet.findMany<Prisma.FleetFindManyArgs>(args);
  }
  async fleet<T extends Prisma.FleetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FleetFindUniqueArgs>
  ): Promise<PrismaFleet | null> {
    return this.prisma.fleet.findUnique(args);
  }
  async createFleet<T extends Prisma.FleetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FleetCreateArgs>
  ): Promise<PrismaFleet> {
    return this.prisma.fleet.create<T>(args);
  }
  async updateFleet<T extends Prisma.FleetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FleetUpdateArgs>
  ): Promise<PrismaFleet> {
    return this.prisma.fleet.update<T>(args);
  }
  async deleteFleet<T extends Prisma.FleetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FleetDeleteArgs>
  ): Promise<PrismaFleet> {
    return this.prisma.fleet.delete(args);
  }
}
