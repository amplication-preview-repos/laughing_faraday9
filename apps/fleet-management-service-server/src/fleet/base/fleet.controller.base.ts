/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FleetService } from "../fleet.service";
import { FleetCreateInput } from "./FleetCreateInput";
import { Fleet } from "./Fleet";
import { FleetFindManyArgs } from "./FleetFindManyArgs";
import { FleetWhereUniqueInput } from "./FleetWhereUniqueInput";
import { FleetUpdateInput } from "./FleetUpdateInput";

export class FleetControllerBase {
  constructor(protected readonly service: FleetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fleet })
  async createFleet(@common.Body() data: FleetCreateInput): Promise<Fleet> {
    return await this.service.createFleet({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fleet] })
  @ApiNestedQuery(FleetFindManyArgs)
  async fleets(@common.Req() request: Request): Promise<Fleet[]> {
    const args = plainToClass(FleetFindManyArgs, request.query);
    return this.service.fleets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fleet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fleet(
    @common.Param() params: FleetWhereUniqueInput
  ): Promise<Fleet | null> {
    const result = await this.service.fleet({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fleet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFleet(
    @common.Param() params: FleetWhereUniqueInput,
    @common.Body() data: FleetUpdateInput
  ): Promise<Fleet | null> {
    try {
      return await this.service.updateFleet({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fleet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFleet(
    @common.Param() params: FleetWhereUniqueInput
  ): Promise<Fleet | null> {
    try {
      return await this.service.deleteFleet({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
