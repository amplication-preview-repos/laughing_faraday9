/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, System as PrismaSystem } from "@prisma/client";

export class SystemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SystemCountArgs, "select">): Promise<number> {
    return this.prisma.system.count(args);
  }

  async systems<T extends Prisma.SystemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemFindManyArgs>
  ): Promise<PrismaSystem[]> {
    return this.prisma.system.findMany<Prisma.SystemFindManyArgs>(args);
  }
  async system<T extends Prisma.SystemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemFindUniqueArgs>
  ): Promise<PrismaSystem | null> {
    return this.prisma.system.findUnique(args);
  }
  async createSystem<T extends Prisma.SystemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemCreateArgs>
  ): Promise<PrismaSystem> {
    return this.prisma.system.create<T>(args);
  }
  async updateSystem<T extends Prisma.SystemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemUpdateArgs>
  ): Promise<PrismaSystem> {
    return this.prisma.system.update<T>(args);
  }
  async deleteSystem<T extends Prisma.SystemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SystemDeleteArgs>
  ): Promise<PrismaSystem> {
    return this.prisma.system.delete(args);
  }
}
