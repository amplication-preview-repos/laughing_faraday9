/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnergyDataService } from "../energyData.service";
import { EnergyDataCreateInput } from "./EnergyDataCreateInput";
import { EnergyData } from "./EnergyData";
import { EnergyDataFindManyArgs } from "./EnergyDataFindManyArgs";
import { EnergyDataWhereUniqueInput } from "./EnergyDataWhereUniqueInput";
import { EnergyDataUpdateInput } from "./EnergyDataUpdateInput";

export class EnergyDataControllerBase {
  constructor(protected readonly service: EnergyDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EnergyData })
  async createEnergyData(
    @common.Body() data: EnergyDataCreateInput
  ): Promise<EnergyData> {
    return await this.service.createEnergyData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EnergyData] })
  @ApiNestedQuery(EnergyDataFindManyArgs)
  async energyDataItems(@common.Req() request: Request): Promise<EnergyData[]> {
    const args = plainToClass(EnergyDataFindManyArgs, request.query);
    return this.service.energyDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EnergyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async energyData(
    @common.Param() params: EnergyDataWhereUniqueInput
  ): Promise<EnergyData | null> {
    const result = await this.service.energyData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EnergyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnergyData(
    @common.Param() params: EnergyDataWhereUniqueInput,
    @common.Body() data: EnergyDataUpdateInput
  ): Promise<EnergyData | null> {
    try {
      return await this.service.updateEnergyData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EnergyData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnergyData(
    @common.Param() params: EnergyDataWhereUniqueInput
  ): Promise<EnergyData | null> {
    try {
      return await this.service.deleteEnergyData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
