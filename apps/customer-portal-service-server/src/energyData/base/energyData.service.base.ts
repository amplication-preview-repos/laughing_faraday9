/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EnergyData as PrismaEnergyData } from "@prisma/client";

export class EnergyDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EnergyDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.energyData.count(args);
  }

  async energyDataItems<T extends Prisma.EnergyDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnergyDataFindManyArgs>
  ): Promise<PrismaEnergyData[]> {
    return this.prisma.energyData.findMany<Prisma.EnergyDataFindManyArgs>(args);
  }
  async energyData<T extends Prisma.EnergyDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnergyDataFindUniqueArgs>
  ): Promise<PrismaEnergyData | null> {
    return this.prisma.energyData.findUnique(args);
  }
  async createEnergyData<T extends Prisma.EnergyDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnergyDataCreateArgs>
  ): Promise<PrismaEnergyData> {
    return this.prisma.energyData.create<T>(args);
  }
  async updateEnergyData<T extends Prisma.EnergyDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnergyDataUpdateArgs>
  ): Promise<PrismaEnergyData> {
    return this.prisma.energyData.update<T>(args);
  }
  async deleteEnergyData<T extends Prisma.EnergyDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnergyDataDeleteArgs>
  ): Promise<PrismaEnergyData> {
    return this.prisma.energyData.delete(args);
  }
}
