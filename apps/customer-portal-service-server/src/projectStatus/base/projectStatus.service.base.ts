/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProjectStatus as PrismaProjectStatus } from "@prisma/client";

export class ProjectStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectStatus.count(args);
  }

  async projectStatuses<T extends Prisma.ProjectStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectStatusFindManyArgs>
  ): Promise<PrismaProjectStatus[]> {
    return this.prisma.projectStatus.findMany<Prisma.ProjectStatusFindManyArgs>(
      args
    );
  }
  async projectStatus<T extends Prisma.ProjectStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectStatusFindUniqueArgs>
  ): Promise<PrismaProjectStatus | null> {
    return this.prisma.projectStatus.findUnique(args);
  }
  async createProjectStatus<T extends Prisma.ProjectStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectStatusCreateArgs>
  ): Promise<PrismaProjectStatus> {
    return this.prisma.projectStatus.create<T>(args);
  }
  async updateProjectStatus<T extends Prisma.ProjectStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectStatusUpdateArgs>
  ): Promise<PrismaProjectStatus> {
    return this.prisma.projectStatus.update<T>(args);
  }
  async deleteProjectStatus<T extends Prisma.ProjectStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectStatusDeleteArgs>
  ): Promise<PrismaProjectStatus> {
    return this.prisma.projectStatus.delete(args);
  }
}
