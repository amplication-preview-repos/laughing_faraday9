/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectStatusService } from "../projectStatus.service";
import { ProjectStatusCreateInput } from "./ProjectStatusCreateInput";
import { ProjectStatus } from "./ProjectStatus";
import { ProjectStatusFindManyArgs } from "./ProjectStatusFindManyArgs";
import { ProjectStatusWhereUniqueInput } from "./ProjectStatusWhereUniqueInput";
import { ProjectStatusUpdateInput } from "./ProjectStatusUpdateInput";

export class ProjectStatusControllerBase {
  constructor(protected readonly service: ProjectStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectStatus })
  async createProjectStatus(
    @common.Body() data: ProjectStatusCreateInput
  ): Promise<ProjectStatus> {
    return await this.service.createProjectStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectStatus] })
  @ApiNestedQuery(ProjectStatusFindManyArgs)
  async projectStatuses(
    @common.Req() request: Request
  ): Promise<ProjectStatus[]> {
    const args = plainToClass(ProjectStatusFindManyArgs, request.query);
    return this.service.projectStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectStatus(
    @common.Param() params: ProjectStatusWhereUniqueInput
  ): Promise<ProjectStatus | null> {
    const result = await this.service.projectStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectStatus(
    @common.Param() params: ProjectStatusWhereUniqueInput,
    @common.Body() data: ProjectStatusUpdateInput
  ): Promise<ProjectStatus | null> {
    try {
      return await this.service.updateProjectStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectStatus(
    @common.Param() params: ProjectStatusWhereUniqueInput
  ): Promise<ProjectStatus | null> {
    try {
      return await this.service.deleteProjectStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
