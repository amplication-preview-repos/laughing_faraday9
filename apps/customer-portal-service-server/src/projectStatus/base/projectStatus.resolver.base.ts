/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProjectStatus } from "./ProjectStatus";
import { ProjectStatusCountArgs } from "./ProjectStatusCountArgs";
import { ProjectStatusFindManyArgs } from "./ProjectStatusFindManyArgs";
import { ProjectStatusFindUniqueArgs } from "./ProjectStatusFindUniqueArgs";
import { DeleteProjectStatusArgs } from "./DeleteProjectStatusArgs";
import { ProjectStatusService } from "../projectStatus.service";
@graphql.Resolver(() => ProjectStatus)
export class ProjectStatusResolverBase {
  constructor(protected readonly service: ProjectStatusService) {}

  async _projectStatusesMeta(
    @graphql.Args() args: ProjectStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProjectStatus])
  async projectStatuses(
    @graphql.Args() args: ProjectStatusFindManyArgs
  ): Promise<ProjectStatus[]> {
    return this.service.projectStatuses(args);
  }

  @graphql.Query(() => ProjectStatus, { nullable: true })
  async projectStatus(
    @graphql.Args() args: ProjectStatusFindUniqueArgs
  ): Promise<ProjectStatus | null> {
    const result = await this.service.projectStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProjectStatus)
  async deleteProjectStatus(
    @graphql.Args() args: DeleteProjectStatusArgs
  ): Promise<ProjectStatus | null> {
    try {
      return await this.service.deleteProjectStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
