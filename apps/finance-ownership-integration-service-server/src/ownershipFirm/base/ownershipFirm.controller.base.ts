/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OwnershipFirmService } from "../ownershipFirm.service";
import { OwnershipFirmCreateInput } from "./OwnershipFirmCreateInput";
import { OwnershipFirm } from "./OwnershipFirm";
import { OwnershipFirmFindManyArgs } from "./OwnershipFirmFindManyArgs";
import { OwnershipFirmWhereUniqueInput } from "./OwnershipFirmWhereUniqueInput";
import { OwnershipFirmUpdateInput } from "./OwnershipFirmUpdateInput";

export class OwnershipFirmControllerBase {
  constructor(protected readonly service: OwnershipFirmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OwnershipFirm })
  async createOwnershipFirm(
    @common.Body() data: OwnershipFirmCreateInput
  ): Promise<OwnershipFirm> {
    return await this.service.createOwnershipFirm({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OwnershipFirm] })
  @ApiNestedQuery(OwnershipFirmFindManyArgs)
  async ownershipFirms(
    @common.Req() request: Request
  ): Promise<OwnershipFirm[]> {
    const args = plainToClass(OwnershipFirmFindManyArgs, request.query);
    return this.service.ownershipFirms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OwnershipFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ownershipFirm(
    @common.Param() params: OwnershipFirmWhereUniqueInput
  ): Promise<OwnershipFirm | null> {
    const result = await this.service.ownershipFirm({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OwnershipFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOwnershipFirm(
    @common.Param() params: OwnershipFirmWhereUniqueInput,
    @common.Body() data: OwnershipFirmUpdateInput
  ): Promise<OwnershipFirm | null> {
    try {
      return await this.service.updateOwnershipFirm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OwnershipFirm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOwnershipFirm(
    @common.Param() params: OwnershipFirmWhereUniqueInput
  ): Promise<OwnershipFirm | null> {
    try {
      return await this.service.deleteOwnershipFirm({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
